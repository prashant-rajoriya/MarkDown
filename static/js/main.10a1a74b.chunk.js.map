{"version":3,"sources":["components/Editor/Editor.js","components/Previewer/Previewer.js","App.js","serviceWorker.js","store/reducers/index.js","index.js"],"names":["Editor","_this","this","react_default","a","createElement","className","id","row","cols","typeof","value","props","markdown","onChange","event","target","Component","connect","state","dispatch","type","marked","setOptions","breaks","renderer","Renderer","link","href","title","text","concat","Previewer","dangerouslySetInnerHTML","__html","App","components_Editor_Editor","components_Previewer_Previewer","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","length","undefined","action","Object","objectSpread","app","es","BrowserRouter","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAGMA,mLAEK,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UAGAH,EAAAC,EAAAC,cAAA,YACAC,UAAU,WACRC,GAAG,SACHC,IAAI,IACJC,KAAK,KACLC,OAAO,OACPC,MAAOT,KAAKU,MAAMC,SAClBC,SAAU,SAACC,GAAD,OAAWd,EAAKW,MAAME,SAASC,EAAMC,OAAOL,kBAf3CM,aAqCNC,cAfS,SAAAC,GACtB,MAAO,CACLN,SAAWM,EAAMN,WAIM,SAACO,GAC1B,MAAO,CACLN,SAAW,SAACH,GAAD,OAAWS,EAAS,CAC7BC,KAAM,kBACNV,MAAOA,OAKEO,CAA8ClB,4BClC7DsB,IAAOC,WAAW,CAChBC,QAAQ,IAGV,IAAMC,EAAW,IAAIH,IAAOI,SAE5BD,EAASE,KAAO,SAACC,EAAMC,EAAOC,GAC9B,kCAAAC,OAAmCH,EAAnC,OAAAG,OAA6CD,EAA7C,aAGME,mLAIF,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,aAGAH,EAAAC,EAAAC,cAAA,OACEE,GAAG,UACH0B,wBAAyB,CAACC,OAAQZ,IAAOpB,KAAKU,MAAMC,SAAU,CAAEY,SAAUA,eAX5DR,aAyBTC,cALS,SAAAC,GACtB,MAAO,CACLN,SAAWM,EAAMN,WAGNK,CAA0Bc,GChB1BG,mLAhBX,OACMhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,mBACFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+B,EAAD,OAEFjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAD,gBAXEpB,aCMEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uFClBAC,EAAe,CACnB9B,SAAQ,+qCCSJ+B,EAASC,YDsCA,WAAkC,IAAjC1B,EAAiC2B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,MAAmB,oBAAhBC,EAAO5B,KACD6B,OAAAC,EAAA,EAAAD,CAAA,GACF/B,EADL,CAEEN,SAAUoC,EAAOtC,QAIdQ,IC5CHiC,EACJjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAUT,MAAOA,GACfzC,EAAAC,EAAAC,cAACiD,EAAA,EAAD,KACEnD,EAAAC,EAAAC,cAACkD,EAAD,QAKNC,IAASC,OAAQL,EAAMM,SAASC,eAAe,SF6GzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.10a1a74b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Editor.css';\nimport { connect } from 'react-redux';\nclass Editor extends Component {\n\n  render() {\n    return (\n      <div className='Editor'>\n        <div className=\"Header\">\n          Editor\n        </div>\n        <textarea\n        className='Textarea'\n          id='editor'\n          row='8' \n          cols='80' \n          typeof='text'\n          value={this.props.markdown}\n          onChange={(event) => this.props.onChange(event.target.value)}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    markdown : state.markdown\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onChange : (value) => dispatch({\n      type: \"CHANGE_MARKDOWN\",\n      value: value\n    }),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Editor);","import React, { Component } from 'react';\nimport './Previewer.css';\nimport { connect } from 'react-redux';\nimport marked from 'marked';\n\n\nmarked.setOptions({\n  breaks: true,\n});\n\nconst renderer = new marked.Renderer();\n\nrenderer.link = (href, title, text) => {\nreturn `<a target=\"_blank\" href=\"${href}\" >${text}</a>` \n}\n\nclass Previewer extends Component {\n\n    \n  render() {\n    return (\n      <div className='Previewer'>\n        <div className='Header'>\n          Previewer\n        </div>\n        <div\n          id='preview'\n          dangerouslySetInnerHTML={{__html: marked(this.props.markdown, { renderer: renderer })}}\n          \n          />\n      </div>\n    );\n  }\n \n}\n\nconst mapStateToProps = state => {\n  return {\n    markdown : state.markdown\n  }\n}\nexport default connect(mapStateToProps) (Previewer);","import React, { Component } from 'react';\nimport './App.css';\n\nimport Editor from './components/Editor/Editor';\nimport Previewer from './components/Previewer/Previewer'\n\nclass App extends Component {\n\n  render() {\n    return (\n          <div className=\"App\">\n              <h1 className=\"Main-header\">Markdown webApp</h1>\n            <div className='Container'>\n              <div>\n                <Editor />\n              </div>\n              <div>\n                <Previewer />\n              </div>\n              </div>\n          </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = { \n  markdown : `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`}\n\nexport default (state = initialState, action) => {\n  if(action.type === 'CHANGE_MARKDOWN') {\n    return {\n      ...state,\n      markdown: action.value\n    }\n  }\n\n  return state;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider} from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './store/reducers';\n\nconst store =  createStore(reducer);\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n)\n\nReactDOM.render( app , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}